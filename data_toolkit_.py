# -*- coding: utf-8 -*-
"""Data_Toolkit .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19UOKUCTgHs8VUgnh09_Ms42juo9elK4e

1.Demonstrate three different methods for creating identical 2D arrays in NumPy Provide the code for each
method and the final output after each method
"""

""" There are Three diffrent methods to create 2d identical array in numpy:-
1.numpy.array
2.numpy.full
3.numpy.zeros"""
import numpy as np
arr =np.array([[1,2,3],[4,5,6]])
print("arr:",arr)
arr1= np.full((2,3),[[1,2,3],[4,5,6]])
print("arr1:",arr1)
arr2=np.zeros((2,3))
arr2[0,:]=[1,2,3]
arr2[1,:]=[4,5,6]
print("arr2:",arr2)

"""2.Using the Numpy function, generate an array of 100 evenly spaced numbers between 1 and 10 and
Reshape that 1D array into a 2D array
"""

import numpy as np
## using linspace function for  100 evenly spaced numbers between 1 and 10
arr_1d=np.linspace(1,10,100)
print("arr_1d",)
print(arr_1d)
## reshaping the 1d array to 2d array
arr_2d=arr_1d.reshape((10,10))
print("2d array :")
print(arr_2d)

"""3. Explain the following terms
* The difference in np.array, np.asarray and np.asanyarray
* The difference between Deep copy and shallow copy.
"""

### difference in np.array, np.asarray and np.asanyarray'''
###asanyarray:-Convert the input to an ndarray, but pass ndarray subclasses through

arr=np. matrix([1,2,3])
arr1= np.asanyarray(arr)
print(arr1)
###np.array:- creates a new array
import numpy as np
a = [1, 2, 3]
arr = np.array(a)
print(arr)
###np.asarray:-Does not create a copy if the input is already an array of the correct type
a = np.array([1, 2, 3])
arr = np.asarray(a)
print(arr)

##The difference between Deep copy and shallow copy.
## Shallow copy:-
''' creates a new object , but does not create the copy of the object.
    create by using copy module's copy function'''
import copy
a= [[1, 2, 3], [4, 5, 6]]
shallow_copy=copy.copy(a)
print("shallow_copy",shallow_copy)
## Deep copy :-
'''Deep copy creates new object , and copy all objects from the original data .
 changes made to deep copy doen not make changes in original object.
 creates using copy module's deepcopy function.'''
b=[[1, 2, 3], [4, 5, 6]]
deep_copy=copy.deepcopy(b)
print("deep_copy:",deep_copy)

"""4. Generate a 3*3 array with random floating-point numbers between 5 and 20 then, round each number in
the array to 2 decimal places
"""

## creating a array between 5 and 20
arr1=np.random.uniform(5,21,size=(3,3))
print("array:",arr1)
## rounding the array to 2 decimal places
rounded_array=np.round(arr1,2)
print("rounded array is:",rounded_array)

"""5. Create a NumPy array with random integers between 1 and 10 of shape (5,6 ). After creating the array
perform the following operations:

 a)Extract all even integers from array.

 b)Extract all odd integers from array.
"""

## creating array with random integers between 1 and 10
arr = np.random.randint(1, 11, size=(5, 6))
## extracting even integers from array
even_integers=arr[arr%2==0]
print("array:")
print(arr)
print("even integers in array are;")
print(even_integers)
## extracting odd integers from array
odd_integers=arr[arr%2!=0]
print("array:")
print(arr)
print("odd integers in array are;")
print(odd_integers)

"""6.Create a 3D NumPy array of shape (3,3,3) containing random integers between 1 and 10 Perform the
following operations:

 a) Find the indices of the maximum values along each depth level (third axis).


"""

## creating array with random integers between 1 and 10
arr = np.random.randint(1, 11, size=(3,3,3))
print(arr)

## finding indices of maximum values

max_indices = np.argmax(arr, axis=2)
print("Indices of Maximum Values along each Depth Level:")
print(max_indices)

"""b) Perform elementwise multiplication of between both arrayX"""

expanded_max_indices = max_indices[:, :, np.newaxis]
arr2=arr * expanded_max_indices
print(arr2)

"""7. Clean and transform the 'Phone' column in the sample dataset to remove non-numeric characters and
convert it to a numeric data type Also display the taPle attributes and data types of each column
"""

import pandas as pd
import numpy as np
file_path=r"/content/sample_data/People_Data.csv"
data = pd.read_csv(file_path)
data['Phone'] = data['Phone'].str.replace(r'\D', '')
data['Phone'] = pd.to_numeric(data['Phone'], errors='coerce')

print(data.info())

"""8. Perform the following tasks using people dataset:

 a) Read the 'data.csv' file using pandas, skipping the first 50 rows
"""

df= pd.read_csv("/content/sample_data/People_Data.csv",skiprows=50)
print(df.info())

""" b) Only read the columns: 'Last Name', ‘Gender’,’Email’,‘Phone’ and ‘Salary’ from the file."""

import pandas as pd

data = pd.read_csv("/content/sample_data/People_Data.csv", usecols=['Last Name', 'Gender', 'Email', 'Phone', 'Salary'])

print(data.info())

""" c) Display the first 10 rows of the filtered dataset."""

print(data.head(10))

""" d) Extract the ‘Salary’' column as a Series and display its last 5 values"""

df= pd.read_csv("/content/sample_data/People_Data.csv")
salaries =df["Salary"]
print(salaries.tail(5))

"""9. Filter and select rows from the People_Dataset, where the “Last Name' column contains the name 'Duke',
'Gender' column contains the word Female and ‘Salary’ should be less than 85000.
"""

data_1 = df[(df['Last Name'].str.contains("Duke")) & (df['Gender'] == "Female") & (df["Salary"] < 85000)]
print(data_1)

"""10.Create a 7*5 Dataframe in Pandas using a series generated from 35 random integers between 1 to 6"""

import pandas as pd
s = np.random.randint(1, 7, size=35)
data1= s.reshape((7, 5))
print(data1)

"""11.Create two different Series, each of length 50, with the following criteria:

a) The first Series should contain random numbers ranging from 10 to 50.

b) The second Series should contain random numbers ranging from 100 to 1000.

c) Create a DataFrame by 'oining these Series by column, and, change the names of the columns to 'col1', 'col2',
etc&
"""

a1 = pd.Series(np.random.randint(10, 51,50))
a2 = pd.Series(np.random.randint(100, 1000,50))
print("series1:",a1)
print("series2:",a2)
df = pd.DataFrame({'col1': a1, 'col2': a2})

print("DataFrame:")
print(df)

"""12.Perform the following operations using people data set:

a) Delete the 'Email', 'Phone', and 'Date of birth' columns from the dataset.

b) Delete the rows containing any missing values.

d) Print the final output also
"""

df = pd.read_csv("/content/sample_data/People_Data.csv")
df.drop(columns=['Email', 'Phone', 'Date of birth'], inplace=True)
df.dropna(inplace=True)
print(df)

"""13. Create two NumPy arrays, x and y, each containing 100 random float values between 0 and 1. Perform the
following tasks using Matplotlib and NumPy:

a) Create a scatter plot using x and y, setting the color of the points to red and the marker style to 'o'.

b) Add a horizontal line at y = 0.5 using a dashed line style and label it as 'y = 0.5'.

c) Add a vertical line at x = 0.5 using a dotted line style and label it as 'x = 0.5'.

d) Label the x-axis as 'X-axis' and the y-axis as 'Y-axis'.

e) Set the title of the plot as 'Advanced Scatter Plot of Random Values'.

f) Display a legend for the scatter plot, the horizontal line, and the vertical line.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
a=np.random.rand(100)
b=np.random.rand(100)
print("array1:",a)
print("array2:",b)
## scatter lot using x and y, setting the color of the oints to red and the marker style to 'o'.
plt.scatter(a,b,c="red",marker="o")
##adding horizontal and vertical line
plt.axhline(y=0.5, color='blue', linestyle='--', label='y = 0.5')
plt.axvline(x=0.5, color='blue', linestyle=':', label='x = 0.5')
## Label the x-axis as 'X-axis' and the y-axis as 'Y-axis'.
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
## Set the title of the lot as 'Advanced Scatter Plot of Random Values'.
plt.title('Advanced Scatter Plot of Random Values')
## legend for the scatter lot, the horizontal line, and the vertical line
plt.legend()
plt.show

"""14. Create a time-series dataset in a Pandas DataFrame with columns: 'Date', 'Temperature', 'Humidity' and
Perform the following tasks using Matplotlib:
a) Plot the 'Temperature' and 'Humidity' on the same plot with different y-axes (left y-axis for 'Temperature' and
right y-axis for 'Humidity').

b) Label the x-axis as 'Date'.

c) Set the title of the plot as 'Temperature and Humidity Over Time'.
"""

import matplotlib.pyplot as plt
date_range = pd.date_range(start='1/1/2024', end='1/10/2024')

# Create a DataFrame with random temperature and humidity values
df = pd.DataFrame({
    'Date': date_range,
    'Temperature': np.random.randint(0, 100, size=len(date_range)),
    'Humidity': np.random.randint(0, 100, size=len(date_range))})
print(df)
fig, ax1 = plt.subplots()
# Plot the Temperature on the left y-axis
ax1.plot(df['Date'], df['Temperature'], 'b-')
ax1.set_xlabel('Date')
ax1.set_ylabel('Temperature (°C)', color='b')
ax1.tick_params('y', colors='b')
# Create a second axis object that shares the same x-axis
ax2 = ax1.twinx()

# Plot the Humidity on the right y-axis
ax2.plot(df['Date'], df['Humidity'], 'r-')
ax2.set_ylabel('Humidity (%)', color='r')
ax2.tick_params('y', colors='r')

# Set the title of the plot
fig.tight_layout()
plt.title('Temperature and Humidity Over Time')

# Show the plot
plt.show()

"""15. Create a NumPy array data containing 1000 samples from a normal distribution. Perform the following
tasks using Matplotlib:
a) Plot a histogram of the data with 30 bins.

b) Overlay a line plot representing the normal distribution's probability density function (PDF).

c) Label the x-axis as 'Value' and the y-axis as 'Frequency/Probability'.

d) Set the title of the plot as 'Histogram with PDF Overlay'.

"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Generate some random data
data = np.random.normal(loc=0, scale=1, size=1000)

# Create a histogram with 30 bins
plt.hist(data, bins=30, density=True, alpha=0.6, color='g', label='Histogram')

# Calculate the x values for the PDF
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)

# Plot the PDF
p = norm.pdf(x, np.mean(data), np.std(data))
plt.plot(x, p, 'k', linewidth=2, label='PDF')

# Label the axes and set the title
plt.xlabel('Value')
plt.ylabel('Frequency/Probability')
plt.title('Histogram with PDF Overlay')

# Add a legend
plt.legend()

# Show the plot
plt.show()

"""16. Set the title of the plot as 'Histogram with PDF Overlay"""

plt.title('Histogram with PDF Overlay')

"""17. Create a Seaborn scatter plot of two random arrays, color points based on their position relative to the
origin (quadrants), add a legend, label the axes, and set the title as 'Quadrant-wise Scatter Plot'.
"""

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
# Create two random arrays
x = np.random.rand(50)
y = np.random.rand(50)
quadrants = np.zeros(50)
quadrants[x > 0.5] = 1
quadrants[y > 0.5] = 2
quadrants[(x <= 0.5) & (y > 0.5)] = 3
quadrants[(x <= 0.5) & (y <= 0.5)] = 4

# Create a scatter plot with color based on the quadrant
sns.scatterplot(x=x, y=y, hue=quadrants, palette=["blue", "green", "orange", "red"])
handles, labels = plt.gca().get_legend_handles_labels()
handles.append(plt.Line2D([0], [0], color="black", label="Quadrant I"))
handles.append(plt.Line2D([0], [0], color="black", linestyle="--", label="Quadrant II"))
handles.append(plt.Line2D([0], [0], color="black", linestyle=":", label="Quadrant III"))
handles.append(plt.Line2D([0], [0], color="black", label="Quadrant IV"))
plt.legend(handles=handles)

# Label the axes and set the title
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Quadrant-wise Scatter Plot")

# Show the plot
plt.show()

"""18. With Bokeh, plot a line chart of a sine wave function, add grid lines, label the axes, and set the title as 'Sine
Wave Function
"""

from bokeh.io import show, output_notebook
from bokeh.plotting import figure
from bokeh.models import LinearAxis, Range1d
from math import sin, pi

output_notebook()

x = list(range(0, 360))
y = [sin(i * pi / 180) for i in x]

p = figure(x_range=Range1d(0, 360), y_range=Range1d(-1.5, 1.5), height=300, width=400)
p.line(x, y, legend_label="Sine Wave", line_width=2, line_color="navy")

p.xaxis.axis_label = "X-axis"
p.yaxis.axis_label = "Y-axis"
p.title.text = "Sine Wave Function"

p.xgrid.grid_line_color = "white"
p.ygrid.grid_line_color = "white"

show(p)

"""19. Using Bokeh, generate a bar chart of randomly generated categorical data, color bars based on their
values, add hover tooltips to display exact values, label the axes, and set the title as 'Random Categorical
Bar Chart'8
"""

import pandas as pd
!pip install hvplot
import hvplot.pandas
import panel as pn
import holoviews as hv

# Create a sample DataFrame
df = pd.DataFrame({'cyl': [4, 6, 8, 4, 6, 8],
                   'mpg': [20, 15, 10, 25, 18, 12],
                   'origin': ['USA', 'USA', 'USA', 'Europe', 'Europe', 'Europe']})

# Make DataFrame Pipeline Interactive
idf = df.interactive()

# Create a hvplot
ihvplot = idf.hvplot.bar(x='origin', y='mpg', color='cyl')

# Show the plot
ihvplot

"""20. Using Plotly, create a basic line plot of a randomly generated dataset, label the axes, and set the title as
'Simple Line Plot'8
"""

import plotly.graph_objects as go
# Generate random data
x = np.linspace(0, 10, 25)
y = np.random.normal(size=25)

# Create a trace for the line plot
trace = go.Scatter(x=x, y=y, mode='lines', name='Random Data')

# Set the layout with labeled axes and a title
layout = go.Layout(title='Simple Line Plot',
                   xaxis=dict(title='X-axis'),
                   yaxis=dict(title='Y-axis'))

# Create the figure and add the trace to it
fig = go.Figure(data=[trace], layout=layout)

# Display the figure
fig.show()

"""21. Using Plotly, create an interactive pie chart of randomly generated data, add labels and percentages, set
the title as 'Interactive Pie Chart'.
"""

import plotly.graph_objects as go
import random
labels = [f"Label {i}" for i in range(10)]
values = [random.randint(10, 50) for _ in range(10)]
fig = go.Figure(data=go.Pie(labels=labels, values=values, title='Interactive Pie Chart'))
fig.show()